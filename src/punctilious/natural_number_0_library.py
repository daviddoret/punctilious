r"""A library for (0-based) natural numbers.

"""
from __future__ import annotations
import typing
import punctilious.util as util
import punctilious.binary_relation_library as brl
import punctilious.ternary_boolean_library as tbl


# Relation classes


class IsEqualTo(brl.BinaryRelation):
    r"""The (0-based) natural numbers equipped with the standard equality order relation.

    Mathematical definition
    -------------------------

    :math:`( \mathbb{N}_0, = )`.

    """

    # mathematical properties
    _is_asymmetric: bool | None = False
    _is_connected: bool | None = False
    _is_irreflexive: bool | None = False
    _is_reflexive: bool | None = True
    _is_strongly_connected: bool | None = False
    _is_symmetric: bool | None = True
    _is_transitive: bool | None = True

    @util.readonly_class_property
    def is_antisymmetric(cls) -> tbl.TernaryBoolean:
        r"""

        Proof
        ------

        TODO: Provide proof here.

        """
        return tbl.TernaryBoolean.TRUE

    @util.readonly_class_property
    def is_order_isomorphic_with_n_strictly_less_than(cls) -> tbl.TernaryBoolean:
        r"""

        Proof
        ------

        TODO: Provide proof here.

        """
        return tbl.TernaryBoolean.FALSE

    @classmethod
    def relates(cls, x: FlexibleNaturalNumber0, y: FlexibleNaturalNumber0) -> tbl.TernaryBoolean:
        r"""Returns `True` if :math:`xRy`, `False` otherwise.

        :param x: A Python object.
        :param y: A Python object.
        :return: `True` or `False`.
        """
        x: NaturalNumber0 = NaturalNumber0.from_any(x)
        y: NaturalNumber0 = NaturalNumber0.from_any(y)
        return tbl.TernaryBoolean(int(x) == int(y))


class IsStrictlyLessThan(brl.BinaryRelation):
    r"""The (0-based) natural numbers equipped with the standard strictly less-than order relation.

    Mathematical definition
    -------------------------

    :math:`( \mathbb{N}_0, < )`.

    """

    @util.readonly_class_property
    def is_order_isomorphic_with_n_strictly_less_than(cls) -> tbl.TernaryBoolean:
        r"""

        Proof
        ------

        This order is :math:`( \mathbb{N}, < )`.
        The identity function :math:`f(x) = x` is a bijective function
        from :math:`\mathbb{N} \to \mathbb{N}` such that,
        for every :math:`x` and :math:`y` in :math:`\mathbb{N}`,
        :math:`xRy` if and only if :math:`f(x) < f(y)`.

        """
        return tbl.TernaryBoolean.TRUE

    @util.readonly_class_property
    def least_element(cls) -> NaturalNumber0:
        return NaturalNumber0(x=0)

    @classmethod
    def rank(cls, x: FlexibleNaturalNumber0) -> int:
        r"""Returns the rank of `x` in :math:`( \mathbb{N}_0, < )`.

        :param x: A Python object interpretable as a (0-based) natural number.
        :return: An integer.
        """
        x: NaturalNumber0 = NaturalNumber0.from_any(x)
        return int(x)

    @classmethod
    def relates(cls, x: FlexibleNaturalNumber0, y: FlexibleNaturalNumber0) -> bool:
        r"""Returns `True` if :math:`xRy`, `False` otherwise.

        :param x: A Python object interpretable as a (0-based) natural number.
        :param y: A Python object interpretable as a (0-based) natural number.
        :return: `True` or `False`.
        """
        x: NaturalNumber0 = NaturalNumber0.from_any(x)
        y: NaturalNumber0 = NaturalNumber0.from_any(y)
        return int(x) < int(y)

    @classmethod
    def successor(cls, x: FlexibleNaturalNumber0) -> NaturalNumber0:
        r"""Returns the successor of `x` in :math:`( \mathbb{N}_0, < )`.

        :param x: A Python object interpretable as a (0-based) natural number.
        :return: The successor of `x`.
        """
        x: NaturalNumber0 = NaturalNumber0.from_any(x)
        return NaturalNumber0(x + 1)

    @classmethod
    def unrank(cls, n: int) -> NaturalNumber0:
        r"""Returns the (0-based) natural number of `x` such that its rank in :math:`( \mathbb{N}_0, < ) = n`.

        :param n: A positive integer.
        :return: A (0-based) natural number.
        """
        n = int(n)
        if n < 0:
            raise util.PunctiliousException("`n` must be a positive integer.", n=n)
        x: NaturalNumber0 = NaturalNumber0(n)
        return x


# Relations

is_equal_to = IsEqualTo  # The canonical equality relation for natural-number-0 elements.
is_strictly_less_than = IsStrictlyLessThan  # The canonical is-strictly-less-than relation for natural-number-0 elements.


# Main class

class NaturalNumber0(brl.OrderIsomorphicToNaturalNumber0AndStrictlyLessThanStructure, int):
    r"""A (0-based) natural number.

    Mathematical definition
    -------------------------

    :math:`\mathbb{N}_0`.


    """

    _HASH_SEED: int = 13673191340634779527  # A static random seed to reduce collision risk, originally generated by random.getrandbits(64).

    def __hash__(self):
        return hash((NaturalNumber0, NaturalNumber0._HASH_SEED, int(self),))

    def __new__(cls, x):
        x = int(x)
        if x < 0:
            raise util.PunctiliousException("`x` is less than 0.", x=x)
        return super().__new__(cls, x)

    def __str__(self):
        return str(int(self))

    @classmethod
    def from_any(cls, o: object) -> NaturalNumber0:
        r"""Declares a (0-based) natural number from a Python object, using implicit conversion if necessary.

        :param o: A Python object interpretable as a (0-based) natural number).
        :return: A (0-based) natural number.
        """
        if isinstance(o, NaturalNumber0):
            return o
        if isinstance(o, int):
            return NaturalNumber0(o)
        raise util.PunctiliousException('Failure to interpret `o` as a natural-number-0.', o_type=type(o), o=o)

    @util.readonly_class_property
    def is_equal_to_relation(self) -> typing.Type[brl.BinaryRelation]:
        return IsEqualTo

    @util.readonly_class_property
    def is_strictly_less_than_relation(self) -> typing.Type[brl.BinaryRelation]:
        return IsStrictlyLessThan

    @util.readonly_class_property
    def least_element(cls) -> NaturalNumber0:
        return cls.is_strictly_less_than_relation.least_element


# Flexible types to facilitate data validation

FlexibleNaturalNumber0 = typing.Union[
    NaturalNumber0, int]

# Aliases

NN0 = NaturalNumber0  # An alias for NaturalNumber0
