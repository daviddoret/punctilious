
𝐭𝐡𝐞𝐨𝐫𝐲 𝟐.𝟏: 𝐭𝐡𝐞 𝐏𝐞𝐚𝐧𝐨 𝐚𝐱𝐢𝐨𝐦𝐬
𝐄𝐱𝐭𝐞𝐧𝐝𝐞𝐝 𝐭𝐡𝐞𝐨𝐫𝐢𝐞𝐬:
The following theories are extended by 𝐭𝐡𝐞𝐨𝐫𝐲 𝟐.𝟏: 𝐭𝐡𝐞 𝐏𝐞𝐚𝐧𝐨 𝐚𝐱𝐢𝐨𝐦𝐬.
	 ⁃ foundation-system

𝐒𝐢𝐦𝐩𝐥𝐞-𝐨𝐛𝐣𝐜𝐭 𝐝𝐞𝐜𝐥𝐚𝐫𝐚𝐭𝐢𝐨𝐧𝐬:
Let class-of-classes be a simple-objct denoted as ⌜ class-of-classes ⌝.
Let theory-class be a simple-objct denoted as ⌜ theory-class ⌝.
Let false be a simple-objct denoted as ⌜ false ⌝.
Let true be a simple-objct denoted as ⌜ true ⌝.
Let truth-values be a simple-objct denoted as ⌜ truth-values ⌝.
Let propositional-relations-class be a simple-objct denoted as ⌜ propositional-relations-class ⌝.
Let proposition-class be a simple-objct denoted as ⌜ proposition-class ⌝.
Let contradictory-theories be a simple-objct denoted as ⌜ contradictory-theories ⌝.
Let contradictory-statement be a simple-objct denoted as ⌜ contradictory-statement ⌝.
Let 0 be a simple-objct denoted as ⌜ 0 ⌝.
Let 1 be a simple-objct denoted as ⌜ 1 ⌝.
Let 2 be a simple-objct denoted as ⌜ 2 ⌝.
Let 3 be a simple-objct denoted as ⌜ 3 ⌝.
Let 4 be a simple-objct denoted as ⌜ 4 ⌝.
Let natural-number be a simple-objct denoted as ⌜ natural-number ⌝.

𝐑𝐞𝐥𝐚𝐭𝐢𝐨𝐧 𝐝𝐞𝐜𝐥𝐚𝐫𝐚𝐭𝐢𝐨𝐧𝐬:
Let ∈ be a binary relation denoted as ⌜ ∈ ⌝, that signals well-formed formulae in infix-operator syntax (e.g.: ⌜ 𝐱₁ ∈ 𝐱₂ ⌝).
Let = be a binary relation denoted as ⌜ = ⌝, that signals well-formed formulae in infix-operator syntax (e.g.: ⌜ 𝐱₁ = 𝐱₂ ⌝).
Let ⟹ be a binary relation denoted as ⌜ ⟹ ⌝, that signals well-formed formulae in infix-operator syntax (e.g.: ⌜ 𝐱₁ ⟹ 𝐱₂ ⌝).
Let ∧ be a binary relation denoted as ⌜ ∧ ⌝, that signals well-formed formulae in infix-operator syntax (e.g.: ⌜ 𝐱₁ ∧ 𝐱₂ ⌝).
Let ∨ be a binary relation denoted as ⌜ ∨ ⌝, that signals well-formed formulae in infix-operator syntax (e.g.: ⌜ 𝐱₁ ∨ 𝐱₂ ⌝).
Let ¬ be a unary relation denoted as ⌜ ¬ ⌝, that signals well-formed formulae in prefix-operator syntax (e.g.: ⌜ ¬𝐱 ⌝).
Let ≠ be a binary relation denoted as ⌜ ≠ ⌝, that signals well-formed formulae in infix-operator syntax (e.g.: ⌜ 𝐱₁ ≠ 𝐱₂ ⌝).
Let is be a binary relation denoted as ⌜ is ⌝, that signals well-formed formulae in infix-operator syntax (e.g.: ⌜ 𝐱₁ is 𝐱₂ ⌝).
Let relation-declaration be a binary relation denoted as ⌜ relation-declaration ⌝, that signals well-formed formulae in function-call syntax (e.g.: ⌜ relation-declaration(𝐱₁, 𝐱₂ ,… ,𝐱ₙ) ⌝).
Let simple-objct-declaration be a binary relation denoted as ⌜ simple-objct-declaration ⌝, that signals well-formed formulae in function-call syntax (e.g.: ⌜ simple-objct-declaration(𝐱₁, 𝐱₂ ,… ,𝐱ₙ) ⌝).
Let theory-declaration be a binary relation denoted as ⌜ theory-declaration ⌝, that signals well-formed formulae in function-call syntax (e.g.: ⌜ theory-declaration(𝐱₁, 𝐱₂ ,… ,𝐱ₙ) ⌝).
Let theory-extension be a binary relation denoted as ⌜ theory-extension ⌝, that signals well-formed formulae in function-call syntax (e.g.: ⌜ theory-extension(𝐱₁, 𝐱₂ ,… ,𝐱ₙ) ⌝).
Let variable-declaration be a binary relation denoted as ⌜ variable-declaration ⌝, that signals well-formed formulae in function-call syntax (e.g.: ⌜ variable-declaration(𝐱₁, 𝐱₂ ,… ,𝐱ₙ) ⌝).
Let is-a be a binary relation denoted as ⌜ is-a ⌝, that signals well-formed formulae in infix-operator syntax (e.g.: ⌜ 𝐱₁ is-a 𝐱₂ ⌝).
Let ++ be a unary relation denoted as ⌜ ++ ⌝, that signals well-formed formulae in postfix-operator syntax (e.g.: ⌜ 𝐱++ ⌝).

𝐓𝐡𝐞𝐨𝐫𝐲 𝐞𝐥𝐚𝐛𝐨𝐫𝐚𝐭𝐢𝐨𝐧:

𝐍𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐚𝐱𝐢𝐨𝐦 𝟐.𝟏: “0 is a natural number.”

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝐚: (0 is-a natural-number)
	𝐃𝐞𝐫𝐢𝐯𝐚𝐭𝐢𝐨𝐧 𝐟𝐫𝐨𝐦 𝐧𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐚𝐱𝐢𝐨𝐦
	(0 is-a natural-number)                                                │ Follows from 𝐧𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐚𝐱𝐢𝐨𝐦 𝟐.𝟏.

𝐍𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐚𝐱𝐢𝐨𝐦 𝟐.𝟐.𝟏: “If n is a natural number, then n++ is a
	natural number.”

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟐: ((n₁ is-a natural-number) ⟹ ((n₁)++ is-a natural-number))
	𝐃𝐞𝐫𝐢𝐯𝐚𝐭𝐢𝐨𝐧 𝐟𝐫𝐨𝐦 𝐧𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐚𝐱𝐢𝐨𝐦
	((n₁ is-a natural-number) ⟹ ((n₁)++ is-a natural-number))              │ Follows from 𝐧𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐚𝐱𝐢𝐨𝐦 𝟐.𝟐.𝟏.

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟑: ((0)++ is-a natural-number)
	𝐏𝐫𝐨𝐨𝐟 𝐛𝐲 𝐦𝐨𝐝𝐮𝐬 𝐩𝐨𝐧𝐞𝐧𝐬
	((n₁ is-a natural-number) ⟹ ((n₁)++ is-a natural-number))              │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟐.
	(0 is-a natural-number)                                                │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝐚.
	───────────────────────────────────────────────────────────────────────┤
	((0)++ is-a natural-number)                                            │ ∎

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟒: (((0)++)++ is-a natural-number)
	𝐏𝐫𝐨𝐨𝐟 𝐛𝐲 𝐦𝐨𝐝𝐮𝐬 𝐩𝐨𝐧𝐞𝐧𝐬
	((n₁ is-a natural-number) ⟹ ((n₁)++ is-a natural-number))              │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟐.
	((0)++ is-a natural-number)                                            │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟑.
	───────────────────────────────────────────────────────────────────────┤
	(((0)++)++ is-a natural-number)                                        │ ∎

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟓: ((((0)++)++)++ is-a natural-number)
	𝐏𝐫𝐨𝐨𝐟 𝐛𝐲 𝐦𝐨𝐝𝐮𝐬 𝐩𝐨𝐧𝐞𝐧𝐬
	((n₁ is-a natural-number) ⟹ ((n₁)++ is-a natural-number))              │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟐.
	(((0)++)++ is-a natural-number)                                        │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟒.
	───────────────────────────────────────────────────────────────────────┤
	((((0)++)++)++ is-a natural-number)                                    │ ∎

𝙳₇: “We define 1 to be the number 0++, 2 to be the number (0++)++, 3
	to be the number ((0++)++)++,etc. (In other words, 1 := 0++, 2 :=
	1++, 3 := 2++, etc. In this text I use "x := y" to denote the
	statement that x is defined to equal y.)”

𝐅𝐨𝐫𝐦𝐚𝐥 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟏.𝐚: (1 = (0)++)
	𝐃𝐞𝐫𝐢𝐯𝐚𝐭𝐢𝐨𝐧 𝐟𝐫𝐨𝐦 𝐧𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧
	(1 = (0)++)                                                            │ Follows from 𝙳₇.

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟏.𝐛: ((0)++ = 1)
	𝐏𝐫𝐨𝐨𝐟 𝐛𝐲 𝐦𝐨𝐝𝐮𝐬 𝐩𝐨𝐧𝐞𝐧𝐬
	((x₁ = y₁) ⟹ (y₁ = x₁))                                                │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝐍𝐨𝐧𝐞.
	(1 = (0)++)                                                            │ Follows from 𝐟𝐨𝐫𝐦𝐚𝐥 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟏.𝐚.
	───────────────────────────────────────────────────────────────────────┤
	((0)++ = 1)                                                            │ ∎

𝐅𝐨𝐫𝐦𝐚𝐥 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟐.𝐚: (2 = ((0)++)++)
	𝐃𝐞𝐫𝐢𝐯𝐚𝐭𝐢𝐨𝐧 𝐟𝐫𝐨𝐦 𝐧𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧
	(2 = ((0)++)++)                                                        │ Follows from 𝙳₇.

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟐.𝐛: (2 = (1)++)
	𝐒𝐮𝐛𝐬𝐭𝐢𝐭𝐮𝐭𝐢𝐨𝐧 𝐨𝐟 𝐞𝐪𝐮𝐚𝐥 𝐭𝐞𝐫𝐦𝐬
	(2 = ((0)++)++)                                                        │ Follows from 𝐟𝐨𝐫𝐦𝐚𝐥 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟐.𝐚.
	((0)++ = 1)                                                            │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟏.𝐛.
	───────────────────────────────────────────────────────────────────────┤
	(2 = (1)++)                                                            │ ∎

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟐.𝐜: (((0)++)++ = 2)
	𝐏𝐫𝐨𝐨𝐟 𝐛𝐲 𝐦𝐨𝐝𝐮𝐬 𝐩𝐨𝐧𝐞𝐧𝐬
	((x₁ = y₁) ⟹ (y₁ = x₁))                                                │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝐍𝐨𝐧𝐞.
	(2 = ((0)++)++)                                                        │ Follows from 𝐟𝐨𝐫𝐦𝐚𝐥 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟐.𝐚.
	───────────────────────────────────────────────────────────────────────┤
	(((0)++)++ = 2)                                                        │ ∎

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟐.𝐝: ((1)++ = 2)
	𝐒𝐮𝐛𝐬𝐭𝐢𝐭𝐮𝐭𝐢𝐨𝐧 𝐨𝐟 𝐞𝐪𝐮𝐚𝐥 𝐭𝐞𝐫𝐦𝐬
	(((0)++)++ = 2)                                                        │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟐.𝐜.
	((0)++ = 1)                                                            │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟏.𝐛.
	───────────────────────────────────────────────────────────────────────┤
	((1)++ = 2)                                                            │ ∎

𝐅𝐨𝐫𝐦𝐚𝐥 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟑.𝐚: (3 = (((0)++)++)++)
	𝐃𝐞𝐫𝐢𝐯𝐚𝐭𝐢𝐨𝐧 𝐟𝐫𝐨𝐦 𝐧𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧
	(3 = (((0)++)++)++)                                                    │ Follows from 𝙳₇.

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟑.𝐛: (3 = (2)++)
	𝐒𝐮𝐛𝐬𝐭𝐢𝐭𝐮𝐭𝐢𝐨𝐧 𝐨𝐟 𝐞𝐪𝐮𝐚𝐥 𝐭𝐞𝐫𝐦𝐬
	(3 = (((0)++)++)++)                                                    │ Follows from 𝐟𝐨𝐫𝐦𝐚𝐥 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟑.𝐚.
	(((0)++)++ = 2)                                                        │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟐.𝐜.
	───────────────────────────────────────────────────────────────────────┤
	(3 = (2)++)                                                            │ ∎

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟑.𝐜: ((((0)++)++)++ = 3)
	𝐏𝐫𝐨𝐨𝐟 𝐛𝐲 𝐦𝐨𝐝𝐮𝐬 𝐩𝐨𝐧𝐞𝐧𝐬
	((x₁ = y₁) ⟹ (y₁ = x₁))                                                │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝐍𝐨𝐧𝐞.
	(3 = (((0)++)++)++)                                                    │ Follows from 𝐟𝐨𝐫𝐦𝐚𝐥 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟑.𝐚.
	───────────────────────────────────────────────────────────────────────┤
	((((0)++)++)++ = 3)                                                    │ ∎

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟑.𝐝: ((2)++ = 3)
	𝐒𝐮𝐛𝐬𝐭𝐢𝐭𝐮𝐭𝐢𝐨𝐧 𝐨𝐟 𝐞𝐪𝐮𝐚𝐥 𝐭𝐞𝐫𝐦𝐬
	((((0)++)++)++ = 3)                                                    │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟑.𝐜.
	(((0)++)++ = 2)                                                        │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟐.𝐜.
	───────────────────────────────────────────────────────────────────────┤
	((2)++ = 3)                                                            │ ∎

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟒: (3 is-a natural-number)
	𝐒𝐮𝐛𝐬𝐭𝐢𝐭𝐮𝐭𝐢𝐨𝐧 𝐨𝐟 𝐞𝐪𝐮𝐚𝐥 𝐭𝐞𝐫𝐦𝐬
	((((0)++)++)++ is-a natural-number)                                    │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟓.
	((((0)++)++)++ = 3)                                                    │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟑.𝐜.
	───────────────────────────────────────────────────────────────────────┤
	(3 is-a natural-number)                                                │ ∎

𝐅𝐨𝐫𝐦𝐚𝐥 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟑.𝐚: (4 = ((((0)++)++)++)++)
	𝐃𝐞𝐫𝐢𝐯𝐚𝐭𝐢𝐨𝐧 𝐟𝐫𝐨𝐦 𝐧𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧
	(4 = ((((0)++)++)++)++)                                                │ Follows from 𝙳₇.

𝐍𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐚𝐱𝐢𝐨𝐦 𝟐.𝟑: “0 is not the successor of any natural
	number; i.e., we have n++ ≠ 0 for every natural number n.”

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟑.𝟏: ((n₂ is-a natural-number) ⟹ ((n₂)++ ≠ 0))
	𝐃𝐞𝐫𝐢𝐯𝐚𝐭𝐢𝐨𝐧 𝐟𝐫𝐨𝐦 𝐧𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐚𝐱𝐢𝐨𝐦
	((n₂ is-a natural-number) ⟹ ((n₂)++ ≠ 0))                              │ Follows from 𝐧𝐚𝐭𝐮𝐫𝐚𝐥 𝐥𝐚𝐧𝐠𝐮𝐚𝐠𝐞 𝐚𝐱𝐢𝐨𝐦 𝟐.𝟑.

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟔.𝟏: (((((0)++)++)++)++ ≠ 0)
	𝐏𝐫𝐨𝐨𝐟 𝐛𝐲 𝐦𝐨𝐝𝐮𝐬 𝐩𝐨𝐧𝐞𝐧𝐬
	((n₂ is-a natural-number) ⟹ ((n₂)++ ≠ 0))                              │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟑.𝟏.
	((((0)++)++)++ is-a natural-number)                                    │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟐.𝟓.
	───────────────────────────────────────────────────────────────────────┤
	(((((0)++)++)++)++ ≠ 0)                                                │ ∎

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟔.𝟐: (((((0)++)++)++)++ = 4)
	𝐏𝐫𝐨𝐨𝐟 𝐛𝐲 𝐦𝐨𝐝𝐮𝐬 𝐩𝐨𝐧𝐞𝐧𝐬
	((x₁ = y₁) ⟹ (y₁ = x₁))                                                │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝐍𝐨𝐧𝐞.
	(4 = ((((0)++)++)++)++)                                                │ Follows from 𝐟𝐨𝐫𝐦𝐚𝐥 𝐝𝐞𝐟𝐢𝐧𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟑.𝟑.𝐚.
	───────────────────────────────────────────────────────────────────────┤
	(((((0)++)++)++)++ = 4)                                                │ ∎

𝐏𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟔.𝟑: (4 ≠ 0)
	𝐒𝐮𝐛𝐬𝐭𝐢𝐭𝐮𝐭𝐢𝐨𝐧 𝐨𝐟 𝐞𝐪𝐮𝐚𝐥 𝐭𝐞𝐫𝐦𝐬
	(((((0)++)++)++)++ ≠ 0)                                                │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟔.𝟏.
	(((((0)++)++)++)++ = 4)                                                │ Follows from 𝐩𝐫𝐨𝐩𝐨𝐬𝐢𝐭𝐢𝐨𝐧 𝟐.𝟏.𝟔.𝟐.
	───────────────────────────────────────────────────────────────────────┤
	(4 ≠ 0)                                                                │ ∎