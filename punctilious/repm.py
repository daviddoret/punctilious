"""The Representation Module (repm) is an independant module that provides IO and string manipulation utilities."""
import textwrap
import unidecode
import typing

_serif_bold_dict = {
    'a': 'ùêö', 'b': 'ùêõ', 'c': 'ùêú', 'd': 'ùêù', 'e': 'ùêû', 'f': 'ùêü', 'g': 'ùê†',
    'h': 'ùê°', 'i': 'ùê¢', 'j': 'ùê£',
    'k': 'ùê§', 'l': 'ùê•', 'm': 'ùê¶', 'n': 'ùêß', 'o': 'ùê®', 'p': 'ùê©', 'q': 'ùê™',
    'r': 'ùê´', 's': 'ùê¨', 't': 'ùê≠',
    'u': 'ùêÆ', 'v': 'ùêØ', 'w': 'ùê∞', 'x': 'ùê±', 'y': 'ùê≤', 'z': 'ùê≥', 'A': 'ùêÄ',
    'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ',
    'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 'H': 'ùêá', 'I': 'ùêà', 'J': 'ùêâ', 'K': 'ùêä',
    'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç',
    'O': 'ùêé', 'P': 'ùêè', 'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì', 'U': 'ùêî',
    'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó',
    'Y': 'ùêò', 'Z': 'ùêô', '0': 'ùüé', '1': 'ùüè', '2': 'ùüê', '3': 'ùüë', '4': 'ùüí',
    '5': 'ùüì', '6': 'ùüî', '7': 'ùüï',
    '8': 'ùüñ', '9': 'ùüó'}

_monospace_dict = {
    'A': 'ùô∞', 'B': 'ùô±', 'C': 'ùô≤', 'D': 'ùô≥', 'E': 'ùô¥', 'F': 'ùôµ', 'G': 'ùô∂',
    'H': 'ùô∑', 'I': 'ùô∏', 'J': 'ùôπ', 'K': 'ùô∫', 'L': 'ùôª', 'M': 'ùôº', 'N': 'ùôΩ',
    'O': 'ùôæ', 'P': 'ùôø', 'Q': 'ùöÄ', 'R': 'ùöÅ', 'S': 'ùöÇ', 'T': 'ùöÉ', 'U': 'ùöÑ',
    'V': 'ùöÖ', 'W': 'ùöÜ', 'X': 'ùöá', 'Y': 'ùöà', 'Z': 'ùöâ'}


def serif_bold(s=None):
    """Convert to serif bold characters the string s.
    """
    global _serif_bold_dict
    if isinstance(s, int):
        s = str(s)
    if s is None or s == '':
        return ''
    return ''.join([_serif_bold_dict.get(c, c) for c in s])


def monospace(s=None):
    """Convert to monospace characters the string s.
    """
    global _monospace_dict
    if isinstance(s, int):
        s = str(s)
    if s is None or s == '':
        return ''
    return ''.join([_monospace_dict.get(c, c) for c in s])


def wrap(text):
    """Wrap text for friendly rendering as text, e.g. in a console.

    :param text:
    :return:
    """
    return '\n'.join(
        textwrap.wrap(
            text=text, width=70,
            subsequent_indent=f'\t',
            break_on_hyphens=False,
            expand_tabs=True,
            tabsize=4))


class TextFormat:
    def __init__(self, text_format_name: str):
        self._text_format_name = text_format_name

    def __hash__(self):
        return hash((TextFormat, self._text_format_name))

    def __repr__(self):
        return self._text_format_name

    def __str__(self):
        return self._text_format_name


class TextFormats():
    def __init__(self):
        super().__init__('text-formats')
        self.html = TextFormat('html')
        self.latex = TextFormat('latex')
        self.plaintext = TextFormat('plaintext')
        self.markdown = TextFormat('markdown')
        self.unicode = TextFormat('unicode')


text_formats = TextFormats()


class FontWeight:
    def __init__(self, font_weight_name: str):
        self._font_weight_name = font_weight_name

    def __hash__(self):
        return hash((FontWeight, self._font_weight_name))

    def __repr__(self):
        return self._font_weight_name

    def __str__(self):
        return self._font_weight_name


class FontWeights:
    def __init__(self):
        self.plain = FontWeight('plain')
        self.bold = FontWeight('bold')


font_weights = FontWeights()


class FontStyle:
    def __init__(self, font_style_name: str):
        self._font_style_name = font_style_name

    def __hash__(self):
        return hash((FontStyle, self._font_style_name))

    def __repr__(self):
        return self._font_style_name

    def __str__(self):
        return self._font_style_name

    def repr(self, s: str, text_format: TextFormat = text_formats.plaintext):
        match text_format:
            case text_formats.latex:
                return self.repr_as_latex(s)
            case text_formats.plaintext:
                return self.repr_as_plaintext(s)
            case text_formats.unicode:
                return self.repr_as_unicode(s)
            case _:
                return self.repr_as_plaintext(s)

    def repr_as_plaintext(self, s: str):
        return s

    def repr_as_unicode(self, s: str):
        return s

    def repr_as_latex(self, s: str):
        return s


class ItalicFontStyle(FontStyle):
    def __init__(self):
        super().__init__('italic')

    def repr_as_plaintext(self, s: str):
        return s

    def repr_as_unicode(self, s: str):
        return s

    def repr_as_latex(self, s: str):
        return s


class FontStyles:
    def __init__(self):
        self.normal = FontStyle('normal')
        self.italic = FontStyle('italic')


font_styles = FontStyles()


class FontFamily:
    def __init__(self, font_family_name: str):
        self._font_family_name = font_family_name

    def __hash__(self):
        return hash((FontFamily, self._font_family_name))

    def __repr__(self):
        return self._font_family_name

    def __str__(self):
        return self._font_family_name


class FontFamilies:
    def __init__(self):
        self.monospace = FontFamily('monospace')
        self.sans_serif = FontFamily('sans-serif')
        self.serif = FontFamily('serif')


font_families = FontFamilies()


class StyledText:
    """

    """

    def __init__(self, content: str, font_weight: FontWeight = font_weights.plain,
                 font_style: FontStyle = font_styles.normal, font_family: FontFamily = font_families.sans_serif):
        self._content = unidecode.unidecode(content)
        self._font_weight = font_weight
        self._font_style = font_style
        self._font_family = font_family

    def __hash__(self):
        """WARNING: hash is only computed on the content???"""
        return hash(self._content)

    def __repr__(self):
        return self.content

    def __str__(self):
        return self.content

    @property
    def content(self) -> str:
        return self._content

    def repr(self, text_format: TextFormat = text_formats.plaintext):
        match text_format:
            case text_formats.plaintext:
                return self.repr_as_plaintext()
            case text_formats.unicode:
                return self.repr_as_unicode()
            case _:
                return self.repr_as_plaintext()

    def repr_as_latex(self):
        pass

    def repr_as_plaintext(self):
        return self.content

    def repr_as_unicode(self):
        return self.content


class ValueName(StyledText):
    """ValueName models arbitrary named values.

    The ValueName pythonic-class is used to expose feasible value-lists.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class UseCase(ValueName):
    pass


class UseCases(ValueName):
    def __init__(self):
        super().__init__('use_cases')
        self.symbol = UseCase('symbol')
        self.dashed_name = UseCase('dashed_name')
        self.reference = UseCase('reference')
        self.natural_name = UseCase('natural_name')


use_cases = UseCases()


class Style(ValueName):
    pass


class Styles(ValueName):
    serif_normal = Style('serif_normal')
    serif_bold = Style('serif_bold')
    serif_italic = Style('serif_italic')
    serif_bold_italic = Style('serif_bold_italic')
    sans_serif_normal = Style('sans_serif_normal')
    sans_serif_bold = Style('sans_serif_bold')
    sans_serif_italic = Style('sans_serif_italic')
    sans_serif_bold_italic = Style('sans_serif_bold_italic')
    script_normal = Style('script_normal')
    script_bold = Style('script_bold')
    fraktur_normal = Style('fraktur_normal')
    fraktur_bold = Style('fraktur_bold')
    monospace_normal = Style('monospace_normal')
    double_struck_normal = Style('double_struck_normal')


styles = Style('styles')

utf8_subscript_dictionary = {
    '0': u'‚ÇÄ',
    '1': u'‚ÇÅ',
    '2': u'‚ÇÇ',
    '3': u'‚ÇÉ',
    '4': u'‚ÇÑ',
    '5': u'‚ÇÖ',
    '6': u'‚ÇÜ',
    '7': u'‚Çá',
    '8': u'‚Çà',
    '9': u'‚Çâ',
    'a': u'‚Çê',
    'e': u'‚Çë',
    'o': u'‚Çí',
    'x': u'‚Çì',
    # '???': u'‚Çî',
    'h': u'‚Çï',
    'k': u'‚Çñ',
    'l': u'‚Çó',
    'm': u'‚Çò',
    'n': u'‚Çô',
    'p': u'‚Çö',
    's': u'‚Çõ',
    't': u'‚Çú',
    '+': u'‚Çä',
    '-': u'‚Çã',
    '=': u'‚Çå',
    '(': u'‚Çç',
    ')': u'‚Çé',
    'j': u'‚±º',
    'i': u'·µ¢',  # Alternative from the Unicode Phonetic Extensions block: ·µ¢
    'r': u'·µ£',  # Source: Unicode Phonetic Extensions block.
    'u': u'·µ§',  # Source: Unicode Phonetic Extensions block.
    'v': u'·µ•',  # Source: Unicode Phonetic Extensions block.
    'Œ≤': u'·µ¶',  # Source: Unicode Phonetic Extensions block.
    'Œ≥': u'·µß',  # Source: Unicode Phonetic Extensions block.
    # '???': u'·µ®', # Source: Unicode Phonetic Extensions block.
    'œÜ': u'·µ©',  # Source: Unicode Phonetic Extensions block.
    'œá': u'·µ™'  # Source: Unicode Phonetic Extensions block.
}


def subscriptify(s=None):
    """Converts to unicode-subscript the string s.

    References:
        * https://stackoverflow.com/questions/13875507/convert-numeric-strings-to-superscript
        * https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts
    """
    global utf8_subscript_dictionary
    if isinstance(s, int):
        s = str(s)
    if s is None or s == '':
        return ''
    return ''.join([utf8_subscript_dictionary.get(c, c) for c in s])


def prnt(s):
    print(s)
